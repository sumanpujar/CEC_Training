Steps to Create a Spring Boot Application :
1. Install Prerequisites
Java JDK (21 Version recommended) → check with:
> java -version
Maven (if not bundled with IDE) → check with:
mvn -v
IDE: IntelliJ IDEA / Eclipse / VS Code (with Java extension).

2. Create Project (Using Spring Initializr)
Application : 1
Using Website
Go to https://start.spring.io
Select:
Project: Maven
Language: Java
Spring Boot: latest stable (3.5.6)
Dependencies: 	1.Spring Web (for REST APIs), Spring Dev tool

2. Spring Data JPA and MySQL Driver (if database needed)
Note: if you want to run only demo app with out using any database, then you should only add Spring Web (for REST APIs).

Click Generate Project → it downloads a .zip.
Extract and open in your IDE.

3. Project Structure (auto-created)
src/main/java/com/example/demo
   	└── DemoApplication.java   (main entry point)
src/main/resources
   ├── application.properties (config file)
   └── static/ , templates/   (for web apps)

4. Main Class
The auto-generated main class looks like:
@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}
5. Create a Simple REST Controller  : 
Inside package  com.example.demo:
>Create java file HelloController.java
>In java file write the below mentioned lines:
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
@RestController
public class HelloController {
    @GetMapping("/hello")
    public String hello() {
        return "Hello, Spring Boot!";
    		}
}
6. Run the Application
Two ways:
From IDE → Right click DemoApplication.java → Run.
From Terminal:
mvn spring-boot:run
7. Test in Browser/Postman
Open:
http://localhost:8080/hello
➡ You’ll see: Hello, Spring Boot!
====================================================================
Numbers.java
package com.example.demo;
public class Numbers {
	private int num1;
    private int num2;

    // Getters & Setters
    public int getNum1() { return num1; }
    public void setNum1(int num1) { this.num1 = num1; }

    public int getNum2() { return num2; }
    public void setNum2(int num2) { this.num2 = num2; }

}
-----------------------
package com.example.demo;

import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/calc")

public class CalculatorController {
	// 1Pass numbers as URL parameters
    // Example: GET http://localhost:8080/api/calc/add?num1=5&num2=10
    @GetMapping("/add")
    public int addWithParams(@RequestParam int num1, @RequestParam int num2) {
        return num1 + num2;
    }

    // 2.Pass numbers in JSON body
    // Example: POST http://localhost:8080/api/calc/add
    // Body: { "num1": 5, "num2": 10 }
    @PostMapping("/add")
    public int addWithBody(@RequestBody Numbers numbers) {
        return numbers.getNum1() + numbers.getNum2();
    }
}
=========================================================================================
<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>



