Steps to Create a Spring Boot Application :
1. Install Prerequisites
Java JDK (21 Version recommended) → check with:
> java -version
Maven (if not bundled with IDE) → check with:
mvn -v
IDE: IntelliJ IDEA / Eclipse / VS Code (with Java extension).

2. Create Project (Using Spring Initializr)
Application : 1
Using Website
Go to https://start.spring.io
Select:
Project: Maven
Language: Java
Spring Boot: latest stable (3.5.6)
Dependencies: 	1.Spring Web (for REST APIs), Spring Dev tool

2. Spring Data JPA and MySQL Driver (if database needed)
Note: if you want to run only demo app with out using any database, then you should only add Spring Web (for REST APIs).

Click Generate Project → it downloads a .zip.
Extract and open in your IDE.

3. Project Structure (auto-created)
src/main/java/com/example/demo
   	└── DemoApplication.java   (main entry point)
src/main/resources
   ├── application.properties (config file)
   └── static/ , templates/   (for web apps)

4. Main Class
The auto-generated main class looks like:
@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}
5. Create a Simple REST Controller  : 
Inside package  com.example.demo:
>Create java file HelloController.java
>In java file write the below mentioned lines:
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
@RestController
public class HelloController {
    @GetMapping("/hello")
    public String hello() {
        return "Hello, Spring Boot!";
    		}
}
6. Run the Application
Two ways:
From IDE → Right click DemoApplication.java → Run.
From Terminal:
mvn spring-boot:run
7. Test in Browser/Postman
Open:
http://localhost:8080/hello
➡ You’ll see: Hello, Spring Boot!
====================================================================
Numbers.java
package com.example.demo;
public class Numbers {
	private int num1;
    private int num2;

    // Getters & Setters
    public int getNum1() { return num1; }
    public void setNum1(int num1) { this.num1 = num1; }

    public int getNum2() { return num2; }
    public void setNum2(int num2) { this.num2 = num2; }

}
-----------------------
package com.example.demo;

import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/calc")

public class CalculatorController {
	// 1Pass numbers as URL parameters
    // Example: GET http://localhost:8080/api/calc/add?num1=5&num2=10
    @GetMapping("/add")
    public int addWithParams(@RequestParam int num1, @RequestParam int num2) {
        return num1 + num2;
    }

    // 2.Pass numbers in JSON body
    // Example: POST http://localhost:8080/api/calc/add
    // Body: { "num1": 5, "num2": 10 }
    @PostMapping("/add")
    public int addWithBody(@RequestBody Numbers numbers) {
        return numbers.getNum1() + numbers.getNum2();
    }
}
=========================================================================================
=========================================================================================
package com.gamingclub.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @Column(unique = true)
    private String phone;

    private String password;

    private LocalDateTime createdAt = LocalDateTime.now();
    
    
    // Getters and setters

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public LocalDateTime getCreatedAt() {
		return createdAt;
	}

	public void setCreatedAt(LocalDateTime createdAt) {
		this.createdAt = createdAt;
	}
 
}

------------------------------------------------------------------------

package com.gamingclub.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.gamingclub.dto.request.SignupRequest;
import com.gamingclub.dto.response.LoginRequest;
import com.gamingclub.model.User;
import com.gamingclub.service.UserService;

@RestController
@RequestMapping("/api/auth")
public class AuthController {
    @Autowired
    private UserService userService;

    @PostMapping("/signup")
    public ResponseEntity<User> signup(@RequestBody SignupRequest request) {
        User user = userService.signup(request);
        return ResponseEntity.ok(user);
    }

    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestBody LoginRequest request) {
        return userService.login(request)
                .map(user -> ResponseEntity.ok("Login successful! Welcome " + user.getName()))
                .orElse(ResponseEntity.status(401).body("Invalid phone number or password"));
    }
}
=============================================================================================

package com.gamingclub.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import com.gamingclub.model.User;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByPhone(String phone);
}

============================================================
package com.gamingclub.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.gamingclub.dto.request.SignupRequest;
import com.gamingclub.dto.response.LoginRequest;
import com.gamingclub.model.User;
import com.gamingclub.repository.UserRepository;

import java.util.Optional;


@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;

    public User signup(SignupRequest request) {
        User user = new User();
        user.setName(request.name);
        user.setPhone(request.phone);
        user.setPassword(request.password); // ⚠️ Ideally, hash the password
        return userRepository.save(user);
    }

    public Optional<User> login(LoginRequest request) {
        return userRepository.findByPhone(request.phone)
                .filter(user -> user.getPassword().equals(request.password));
    }
}
===========================================================
Property file entries:
================================

spring.application.name=gamingclub
spring.datasource.url=jdbc:mysql://localhost:3306/gamingclub?useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=suman123

# JPA settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# Logging
logging.level.org.springframework=INFO
logging.level.com.gamingclub=DEBUG

============================================================
API Endpoints with Request & Response for USERS table
Signup : API
POST  /api/auth/signup

example:  POST  http://localhost/api/auth/signup
Content-Type: application/json
Request:
{
  "name": "Suman",
  "phone": "8888564535",
  "password": "mypassword"
}
Response:
{
  "id": 1,
  "name": "Suman",
  "phone": "8888564535",
  "password": "mypassword",
  "createdAt": "2025-09-26T00:31:27.2943571"
}
----------------------------------------------------------------------------------------
Login
POST /api/auth/login
Content-Type: application/json

Request :

{
  "phone": "8888564535",
  "password": "mypassword"
}
Response:
Login successful! Welcome Suman
If wrong password:
Invalid phone number or password

========================================================================
========================================================================
1>
package com.gaming.model;
import jakarta.persistence.*;
@Entity
@Table(name = "games")
public class Game {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String name;

    @Column(columnDefinition = "TEXT")
    private String description;

    private String category;

    @Column(name = "cost_per_minute", nullable = false)
    private double costPerMinute;

    public Game() {}

    // Getters & Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public String getCategory() { return category; }
    public void setCategory(String category) { this.category = category; }

    public Double getCostPerMinute() { return costPerMinute; }
    public void setCostPerMinute(Double costPerMinute) { this.costPerMinute = costPerMinute; }
}

========================================================================================
2>
package com.gaming.repository;

import com.gaming.model.Game;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface GameRepository extends JpaRepository<Game, Long> {
    Optional<Game> findByName(String name);
}
====================================================================================
3>
package com.gaming.controller;

import com.gaming.dto.request.GameRequest;
import com.gaming.dto.response.ApiResponse;
import com.gaming.dto.response.GameResponse;
import com.gaming.service.GameService;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/games")
public class GameController {

    private final GameService gameService;
    private static final Logger logger = LoggerFactory.getLogger(GameController.class);

    public GameController(GameService gameService) {
        this.gameService = gameService;
    }

    @PostMapping
    public ResponseEntity<ApiResponse<GameResponse>> createGame(@Valid @RequestBody GameRequest request) {
        logger.info("POST /games");
        GameResponse response = gameService.createGame(request);
        return ResponseEntity.status(HttpStatus.CREATED)
                .body(new ApiResponse<>(201, "Game created successfully", response));
    }

    @GetMapping
    public ResponseEntity<ApiResponse<List<GameResponse>>> getAllGames() {
        logger.info("GET /games");
        List<GameResponse> list = gameService.getAllGames();
        return ResponseEntity.ok(new ApiResponse<>(200, "Fetched all games", list));
    }

    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<GameResponse>> getGameById(@PathVariable Long id) {
        logger.info("GET /games/{}", id);
        GameResponse response = gameService.getGameById(id);
        return ResponseEntity.ok(new ApiResponse<>(200, "Fetched game", response));
    }

    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<GameResponse>> updateGame(@PathVariable Long id,
                                                                @Valid @RequestBody GameRequest request) {
        logger.info("PUT /games/{}", id);
        GameResponse response = gameService.updateGame(id, request);
        return ResponseEntity.ok(new ApiResponse<>(200, "Game updated successfully", response));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> deleteGame(@PathVariable Long id) {
        logger.info("DELETE /games/{}", id);
        gameService.deleteGame(id);
        return ResponseEntity.ok(new ApiResponse<>(200, "Game deleted successfully", null));
    }
}
====================================================================
4>
package com.gaming.service;

import com.gaming.dto.request.GameRequest;
import com.gaming.dto.response.GameResponse;
import com.gaming.exception.ResourceNotFoundException;
import com.gaming.model.Game;
import com.gaming.repository.GameRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class GameService {

    private final GameRepository gameRepository;
    private static final Logger logger = LoggerFactory.getLogger(GameService.class);

    public GameService(GameRepository gameRepository) {
        this.gameRepository = gameRepository;
    }

    // Create
    public GameResponse createGame(GameRequest request) {
        logger.debug("Creating game: {}", request.getName());

        Game game = new Game();
        game.setName(request.getName());
        game.setDescription(request.getDescription());
        game.setCategory(request.getCategory());
        game.setCostPerMinute(request.getCostPerMinute());

        Game saved = gameRepository.save(game);
        return mapToResponse(saved);
    }

    // Read all
    public List<GameResponse> getAllGames() {
        logger.debug("Fetching all games");
        return gameRepository.findAll().stream()
                .map(this::mapToResponse)
                .collect(Collectors.toList());
    }

    // Read one
    public GameResponse getGameById(Long id) {
        logger.debug("Fetching game with id={}", id);
        Game game = gameRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Game not found with id: " + id));
        return mapToResponse(game);
    }

    // Update
    public GameResponse updateGame(Long id, GameRequest request) {
        logger.debug("Updating game id={}", id);
        Game game = gameRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Game not found with id: " + id));

        game.setName(request.getName());
        game.setDescription(request.getDescription());
        game.setCategory(request.getCategory());
        game.setCostPerMinute(request.getCostPerMinute());

        Game updated = gameRepository.save(game);
        return mapToResponse(updated);
    }

    // Delete
    public void deleteGame(Long id) {
        logger.debug("Deleting game id={}", id);
        Game game = gameRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Game not found with id: " + id));
        gameRepository.delete(game);
    }

    // Mapping
    private GameResponse mapToResponse(Game game) {
        GameResponse r = new GameResponse();
        r.setId(game.getId());
        r.setName(game.getName());
        r.setDescription(game.getDescription());
        r.setCategory(game.getCategory());
        r.setCostPerMinute(game.getCostPerMinute());
        return r;
    }
}
===================================================================
5>
package com.gaming.dto.request;

import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import java.math.BigDecimal;

public class GameRequest {

    @NotBlank(message = "Name is required")
    private String name;

    private String description;

    private String category;

    @NotNull(message = "Cost per minute is required")
    @DecimalMin(value = "0.0", inclusive = true, message = "Cost per minute cannot be negative")
    private Double costPerMinute;

    public GameRequest() {}

    // Getters & Setters
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public String getCategory() { return category; }
    public void setCategory(String category) { this.category = category; }

    public Double getCostPerMinute() { return costPerMinute; }
    public void setCostPerMinute(Double costPerMinute) { this.costPerMinute = costPerMinute; }
}
=============================================================================
6>
package com.gaming.dto.response;

import java.math.BigDecimal;

public class GameResponse {

    private Long id;
    private String name;
    private String description;
    private String category;
    private double costPerMinute;

    public GameResponse() {}

    // Getters & Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public String getCategory() { return category; }
    public void setCategory(String category) { this.category = category; }

    public Double getCostPerMinute() { return costPerMinute; }
    public void setCostPerMinute(Double costPerMinute) { this.costPerMinute = costPerMinute; }
}
=====================================================================
7>
package com.gaming.exception;

import com.gaming.dto.response.ApiResponse;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.util.HashMap;
import java.util.Map;

@RestControllerAdvice
public class GlobalExceptionHandler {

    // Validation errors
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<ApiResponse<Map<String, String>>> handleValidation(MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        for (FieldError fe : ex.getBindingResult().getFieldErrors()) {
            errors.put(fe.getField(), fe.getDefaultMessage());
        }
        ApiResponse<Map<String, String>> body = new ApiResponse<>(400, "Validation failed", errors);
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(body);
    }

    // Resource not found
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ApiResponse<Void>> handleNotFound(ResourceNotFoundException ex) {
        ApiResponse<Void> body = new ApiResponse<>(404, ex.getMessage(), null);
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(body);
    }

    // Data integrity violation (duplicate name/email, foreign key, etc.)
    @ExceptionHandler(DataIntegrityViolationException.class)
    public ResponseEntity<ApiResponse<String>> handleDataIntegrityViolation(DataIntegrityViolationException ex) {
        String message = ex.getMessage();

        if (message.contains("games.name")) {
            message = "Game name must be unique. A game with this name already exists.";
        } else if (message.contains("members.email")) {
            message = "Email must be unique. A member with this email already exists.";
        } else {
            message = "Database error: " + ex.getMessage();
        }

        ApiResponse<String> body = new ApiResponse<>(400, message, null);
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(body);
    }

    // Fallback for other exceptions
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ApiResponse<String>> handleAll(Exception ex) {
        ApiResponse<String> body = new ApiResponse<>(500, "Internal server error", ex.getMessage());
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(body);
    }
}
================================================================
8>
package com.gaming.exception;

public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}
===========================================


