package com.gaming.controller;

import com.gaming.dto.request.MemberRequest;
import com.gaming.dto.response.ApiResponse;
import com.gaming.dto.response.MemberResponse;
import com.gaming.service.MemberService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.util.List;

@RestController
@RequestMapping("/members")
public class MemberController {

    private final MemberService memberService;

    public MemberController(MemberService memberService) {
        this.memberService = memberService;
    }

    // Create member
    @PostMapping
    public ResponseEntity<ApiResponse<MemberResponse>> createMember(@Valid @RequestBody MemberRequest request) {
        MemberResponse response = memberService.createMember(request);
        ApiResponse<MemberResponse> apiResponse = new ApiResponse<>(201, "Member created successfully", response);
        return ResponseEntity.status(HttpStatus.CREATED).body(apiResponse);
    }

    // Get all members
    @GetMapping
    public ResponseEntity<ApiResponse<List<MemberResponse>>> getAllMembers() {
        List<MemberResponse> members = memberService.getAllMembers();
        ApiResponse<List<MemberResponse>> apiResponse = new ApiResponse<>(200, "Members fetched successfully", members);
        return ResponseEntity.ok(apiResponse);
    }

    // Get member by id
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<MemberResponse>> getMemberById(@PathVariable Long id) {
        MemberResponse response = memberService.getMemberById(id);
        ApiResponse<MemberResponse> apiResponse = new ApiResponse<>(200, "Member fetched successfully", response);
        return ResponseEntity.ok(apiResponse);
    }

    // Update member
    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<MemberResponse>> updateMember(@PathVariable Long id,
                                                                    @Valid @RequestBody MemberRequest request) {
        MemberResponse response = memberService.updateMember(id, request);
        ApiResponse<MemberResponse> apiResponse = new ApiResponse<>(200, "Member updated successfully", response);
        return ResponseEntity.ok(apiResponse);
    }

    // Delete member
    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> deleteMember(@PathVariable Long id) {
        memberService.deleteMember(id);
        ApiResponse<Void> apiResponse = new ApiResponse<>(200, "Member deleted successfully", null);
        return ResponseEntity.ok(apiResponse);
    }
}
===========================================================
package com.gaming.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.gaming.dto.request.RechargeRequest;
import com.gaming.dto.response.ApiResponse;
import com.gaming.dto.response.RechargeResponse;
import com.gaming.service.RechargeService;
import jakarta.validation.Valid;


import java.util.List;

@RestController
@RequestMapping("/recharges")
public class RechargeController {

    private final RechargeService rechargeService;

    public RechargeController(RechargeService rechargeService) {
        this.rechargeService = rechargeService;
    }

    // Recharge member
    @PostMapping
    public ResponseEntity<ApiResponse<RechargeResponse>> rechargeMember(@Valid @RequestBody RechargeRequest request) {
        RechargeResponse response = rechargeService.rechargeMember(request);

        String successMessage = String.format(
                "Recharge successful for member %s. Updated balance: %.2f",
                response.getMemberName(),
                response.getUpdatedBalance()
        );

        ApiResponse<RechargeResponse> apiResponse =
                new ApiResponse<>(201, successMessage, response);

        return ResponseEntity.status(201).body(apiResponse);
    }

    // Get all recharges
    @GetMapping
    public ResponseEntity<ApiResponse<List<RechargeResponse>>> getAllRecharges() {
        List<RechargeResponse> list = rechargeService.getAllRecharges();
        ApiResponse<List<RechargeResponse>> apiResponse = new ApiResponse<>(200, "Recharges fetched successfully", list);
        return ResponseEntity.ok(apiResponse);
    }

    // Get recharges by member
    @GetMapping("/member/{memberId}")
    public ResponseEntity<ApiResponse<List<RechargeResponse>>> getRechargesByMember(@PathVariable Long memberId) {
        List<RechargeResponse> list = rechargeService.getRechargesByMember(memberId);
        ApiResponse<List<RechargeResponse>> apiResponse = new ApiResponse<>(200, "Recharges fetched for member successfully", list);
        return ResponseEntity.ok(apiResponse);
    }
}
================================================================
package com.gaming.controller;

import com.gaming.dto.request.GameSessionRequest;
import com.gaming.dto.response.ApiResponse;
import com.gaming.dto.response.GameSessionResponse;
import com.gaming.service.GameSessionService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/sessions")
public class GameSessionController {

    private final GameSessionService gameSessionService;

    public GameSessionController(GameSessionService gameSessionService) {
        this.gameSessionService = gameSessionService;
    }

    @PostMapping("/start")
    public ApiResponse<GameSessionResponse> startSession(@RequestBody GameSessionRequest request) {
        return gameSessionService.startSession(request);
    }

    @PutMapping("/end/{sessionId}")
    public ApiResponse<GameSessionResponse> endSession(@PathVariable Long sessionId) {
        return gameSessionService.endSession(sessionId);
    }

    @GetMapping
    public ApiResponse<List<GameSessionResponse>> getAllSessions() {
        return gameSessionService.listAllSessions();
    }

    @GetMapping("/member/{memberId}")
    public ApiResponse<List<GameSessionResponse>> getMemberSessions(@PathVariable Long memberId) {
        return gameSessionService.listSessionsByMember(memberId);
    }
}
=====================================================================
package com.gaming.controller;

import com.gaming.dto.request.CollectionRequest;
import com.gaming.dto.response.CollectionResponse;
import com.gaming.service.CollectionService;
import com.gaming.dto.response.ApiResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/collections")
public class CollectionController {

    private final CollectionService collectionService;

    public CollectionController(CollectionService collectionService) {
        this.collectionService = collectionService;
    }

    @PostMapping
    public ResponseEntity<ApiResponse<CollectionResponse>> create(@RequestBody CollectionRequest request) {
        CollectionResponse response = collectionService.createCollection(request);
        return ResponseEntity.status(201)
                .body(new ApiResponse<>(201, "Collection created successfully", response));
    }

    @GetMapping
    public ResponseEntity<ApiResponse<List<CollectionResponse>>> getAll() {
        List<CollectionResponse> list = collectionService.getAllCollections();
        return ResponseEntity.ok(new ApiResponse<>(200, "All collections fetched", list));
    }

    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<CollectionResponse>> getById(@PathVariable int id) {
        CollectionResponse response = collectionService.getCollectionById(id);
        return ResponseEntity.ok(new ApiResponse<>(200, "Collection fetched successfully", response));
    }

    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<CollectionResponse>> update(@PathVariable int id,
                                                                  @RequestBody CollectionRequest request) {
        CollectionResponse response = collectionService.updateCollection(id, request);
        return ResponseEntity.ok(new ApiResponse<>(200, "Collection updated successfully", response));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<String>> delete(@PathVariable int id) {
        String result = collectionService.deleteCollection(id);
        return ResponseEntity.ok(new ApiResponse<>(200, result, null));
    }
}
======================================================================

package com.gaming.repository;

import com.gaming.model.Collection;
import org.springframework.data.jpa.repository.JpaRepository;
import java.time.LocalDate;
import java.util.Optional;

public interface CollectionRepository extends JpaRepository<Collection, Integer> {
    Optional<Collection> findByDate(LocalDate date);
}
---------------------------------------------------------------
package com.gaming.repository;

import com.gaming.model.GameSession;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface GameSessionRepository extends JpaRepository<GameSession, Long> {
    List<GameSession> findByMemberId(Long memberId);
}
------------------------------------------------
package com.gaming.repository;

import com.gaming.model.Member;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface MemberRepository extends JpaRepository<Member, Long> {
    Optional<Member> findByEmail(String email);
}
-----------------------------------------------
package com.gaming.repository;

import com.gaming.model.Recharge;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface RechargeRepository extends JpaRepository<Recharge, Long> {
    List<Recharge> findByMemberId(Long memberId);
}
-------------------------SERVICE FILES ----------------------
package com.gaming.service;

import com.gaming.dto.request.CollectionRequest;
import com.gaming.dto.response.CollectionResponse;
import com.gaming.exception.ResourceNotFoundException;
import com.gaming.model.Collection;
import com.gaming.repository.CollectionRepository;
import org.springframework.stereotype.Service;
import java.time.LocalDate;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class CollectionService {

    private final CollectionRepository collectionRepository;

    public CollectionService(CollectionRepository collectionRepository) {
        this.collectionRepository = collectionRepository;
    }

    public void addToCollection(double amount) {
        LocalDate today = LocalDate.now();

        Collection collection = collectionRepository.findByDate(today)
                .orElse(new Collection(0, today));

        collection.setAmount(collection.getAmount() + amount);
        collectionRepository.save(collection);
    }
    
    public CollectionResponse createCollection(CollectionRequest request) {
        Collection collection = new Collection();
        collection.setAmount(request.getAmount());
        collection.setDate(request.getDate());

        Collection saved = collectionRepository.save(collection);
        return mapToResponse(saved);
    }

    public List<CollectionResponse> getAllCollections() {
        return collectionRepository.findAll()
                .stream()
                .map(this::mapToResponse)
                .collect(Collectors.toList());
    }

    public CollectionResponse getCollectionById(int id) {
        Collection collection = collectionRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Collection not found with id: " + id));
        return mapToResponse(collection);
    }

    public CollectionResponse updateCollection(int id, CollectionRequest request) {
        Collection collection = collectionRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Collection not found with id: " + id));

        collection.setAmount(request.getAmount());
        collection.setDate(request.getDate());

        Collection updated = collectionRepository.save(collection);
        return mapToResponse(updated);
    }

    public String deleteCollection(int id) {
        Collection collection = collectionRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Collection not found with id: " + id));
        collectionRepository.delete(collection);
        return "Collection deleted successfully";
    }

    private CollectionResponse mapToResponse(Collection collection) {
        CollectionResponse response = new CollectionResponse();
        response.setId(collection.getId());
        response.setAmount(collection.getAmount());
        response.setDate(collection.getDate());
        return response;
    }
}
--------------------------------------------------------
package com.gaming.service;

import com.gaming.dto.request.GameSessionRequest;
import com.gaming.dto.response.GameSessionResponse;
import com.gaming.dto.response.ApiResponse;
import com.gaming.model.Game;
import com.gaming.model.GameSession;
import com.gaming.model.Member;
import com.gaming.repository.GameRepository;
import com.gaming.repository.GameSessionRepository;
import com.gaming.repository.MemberRepository;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class GameSessionService {

    private final GameSessionRepository sessionRepository;
    private final MemberRepository memberRepository;
    private final GameRepository gameRepository;

    // scaling factor: 1 real minute = 5 virtual minutes
    private static final int TIME_SCALE = 5;

    public GameSessionService(GameSessionRepository sessionRepository,
                              MemberRepository memberRepository,
                              GameRepository gameRepository) {
        this.sessionRepository = sessionRepository;
        this.memberRepository = memberRepository;
        this.gameRepository = gameRepository;
    }

    public ApiResponse<GameSessionResponse> startSession(GameSessionRequest request) {
        Member member = memberRepository.findById(request.getMemberId())
                .orElseThrow(() -> new RuntimeException("Member not found"));
        Game game = gameRepository.findById(request.getGameId())
                .orElseThrow(() -> new RuntimeException("Game not found"));

        GameSession session = new GameSession();
        session.setMember(member);
        session.setGame(game);
        session.setStartedAt(LocalDateTime.now());

        sessionRepository.save(session);

        GameSessionResponse response = new GameSessionResponse();
        response.setMessage("Game session started successfully for member " + member.getName());
        response.setGameName(game.getName());
        response.setMemberName(member.getName());
        response.setStartedAt(session.getStartedAt());

        return new ApiResponse<>(HttpStatus.OK.value(), "Session started", response);
    }

    public ApiResponse<GameSessionResponse> endSession(Long sessionId) {
        GameSession session = sessionRepository.findById(sessionId)
                .orElseThrow(() -> new RuntimeException("Session not found"));

        if (session.getEndedAt() != null) {
            throw new RuntimeException("Session already ended");
        }

        session.setEndedAt(LocalDateTime.now());

        // Calculate scaled duration
        long realMinutes = Duration.between(session.getStartedAt(), session.getEndedAt()).toMinutes();
        long virtualMinutes = realMinutes * TIME_SCALE;

        double cost = virtualMinutes * session.getGame().getCostPerMinute();

        Member member = session.getMember();
        if (member.getBalance() < cost) {
            throw new RuntimeException("Insufficient balance");
        }

        member.setBalance(member.getBalance() - cost);
        memberRepository.save(member);

        session.setMinutesPlayed((int) virtualMinutes);
        session.setCost(cost);
        sessionRepository.save(session);

        GameSessionResponse response = new GameSessionResponse();
        response.setMessage("Game session ended successfully for member " + member.getName());
        response.setGameName(session.getGame().getName());
        response.setMemberName(member.getName());
        response.setStartedAt(session.getStartedAt());
        response.setEndedAt(session.getEndedAt());
        response.setCost(cost);
        response.setUpdatedBalance(member.getBalance());

        return new ApiResponse<>(HttpStatus.OK.value(), "Session ended", response);
    }

    public ApiResponse<List<GameSessionResponse>> listAllSessions() {
        List<GameSessionResponse> sessions = sessionRepository.findAll().stream()
                .map(this::mapToResponse)
                .collect(Collectors.toList());

        return new ApiResponse<>(HttpStatus.OK.value(), "All sessions fetched", sessions);
    }

    public ApiResponse<List<GameSessionResponse>> listSessionsByMember(Long memberId) {
        List<GameSessionResponse> sessions = sessionRepository.findByMemberId(memberId).stream()
                .map(this::mapToResponse)
                .collect(Collectors.toList());

        return new ApiResponse<>(HttpStatus.OK.value(), "Sessions for member fetched", sessions);
    }

    private GameSessionResponse mapToResponse(GameSession session) {
        GameSessionResponse response = new GameSessionResponse();
        response.setGameName(session.getGame().getName());
        response.setMemberName(session.getMember().getName());
        response.setStartedAt(session.getStartedAt());
        response.setEndedAt(session.getEndedAt());
        response.setCost(session.getCost());
        response.setUpdatedBalance(session.getMember().getBalance());
        return response;
    }
}
-----------------------------------------------------------
package com.gaming.service;

import com.gaming.dto.request.MemberRequest;
import com.gaming.dto.response.MemberResponse;
import com.gaming.exception.ResourceNotFoundException;
import com.gaming.model.Member;
import com.gaming.repository.MemberRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class MemberService {

    private final MemberRepository memberRepository;
    private static final Logger logger = LoggerFactory.getLogger(MemberService.class);

    public MemberService(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }

    // Create
    public MemberResponse createMember(MemberRequest request) {
        logger.debug("Creating member: {}", request.getEmail());

        Member member = new Member();
        member.setName(request.getName());
        member.setEmail(request.getEmail());
        member.setPhone(request.getPhone());
        member.setPassword(request.getPassword());
        member.setBio(request.getBio());
        member.setBalance(0.0); // default balance

        try {
            Member saved = memberRepository.save(member);
            return mapToResponse(saved);
        } catch (DataIntegrityViolationException ex) {
            if (ex.getMessage().contains("members.email")) {
                throw new DataIntegrityViolationException("Email must be unique. A member with this email already exists.");
            }
            throw ex;
        }
    }

    // Read all
    public List<MemberResponse> getAllMembers() {
        logger.debug("Fetching all members");
        return memberRepository.findAll().stream()
                .map(this::mapToResponse)
                .collect(Collectors.toList());
    }

    // Read one
    public MemberResponse getMemberById(Long id) {
        logger.debug("Fetching member id={}", id);
        Member member = memberRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Member not found with id: " + id));
        return mapToResponse(member);
    }

    // Update
    public MemberResponse updateMember(Long id, MemberRequest request) {
        logger.debug("Updating member id={}", id);
        Member member = memberRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Member not found with id: " + id));

        member.setName(request.getName());
        member.setEmail(request.getEmail());
        member.setPhone(request.getPhone());
        member.setPassword(request.getPassword());
        member.setBio(request.getBio());

        try {
            Member updated = memberRepository.save(member);
            return mapToResponse(updated);
        } catch (DataIntegrityViolationException ex) {
            if (ex.getMessage().contains("members.email")) {
                throw new DataIntegrityViolationException("Email must be unique. A member with this email already exists.");
            }
            throw ex;
        }
    }

    // Delete
    public void deleteMember(Long id) {
        logger.debug("Deleting member id={}", id);
        Member member = memberRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Member not found with id: " + id));
        memberRepository.delete(member);
    }

    // Mapper
    private MemberResponse mapToResponse(Member member) {
        MemberResponse r = new MemberResponse();
        r.setId(member.getId());
        r.setName(member.getName());
        r.setEmail(member.getEmail());
        r.setPhone(member.getPhone());
        r.setBio(member.getBio());
        r.setBalance(member.getBalance());
        return r;
    }
}
-----------------------------------------------
package com.gaming.service;

import com.gaming.dto.request.MemberRequest;
import com.gaming.dto.response.MemberResponse;
import com.gaming.exception.ResourceNotFoundException;
import com.gaming.model.Member;
import com.gaming.repository.MemberRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class MemberService {

    private final MemberRepository memberRepository;
    private static final Logger logger = LoggerFactory.getLogger(MemberService.class);

    public MemberService(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }

    // Create
    public MemberResponse createMember(MemberRequest request) {
        logger.debug("Creating member: {}", request.getEmail());

        Member member = new Member();
        member.setName(request.getName());
        member.setEmail(request.getEmail());
        member.setPhone(request.getPhone());
        member.setPassword(request.getPassword());
        member.setBio(request.getBio());
        member.setBalance(0.0); // default balance

        try {
            Member saved = memberRepository.save(member);
            return mapToResponse(saved);
        } catch (DataIntegrityViolationException ex) {
            if (ex.getMessage().contains("members.email")) {
                throw new DataIntegrityViolationException("Email must be unique. A member with this email already exists.");
            }
            throw ex;
        }
    }

    // Read all
    public List<MemberResponse> getAllMembers() {
        logger.debug("Fetching all members");
        return memberRepository.findAll().stream()
                .map(this::mapToResponse)
                .collect(Collectors.toList());
    }

    // Read one
    public MemberResponse getMemberById(Long id) {
        logger.debug("Fetching member id={}", id);
        Member member = memberRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Member not found with id: " + id));
        return mapToResponse(member);
    }

    // Update
    public MemberResponse updateMember(Long id, MemberRequest request) {
        logger.debug("Updating member id={}", id);
        Member member = memberRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Member not found with id: " + id));

        member.setName(request.getName());
        member.setEmail(request.getEmail());
        member.setPhone(request.getPhone());
        member.setPassword(request.getPassword());
        member.setBio(request.getBio());

        try {
            Member updated = memberRepository.save(member);
            return mapToResponse(updated);
        } catch (DataIntegrityViolationException ex) {
            if (ex.getMessage().contains("members.email")) {
                throw new DataIntegrityViolationException("Email must be unique. A member with this email already exists.");
            }
            throw ex;
        }
    }

    // Delete
    public void deleteMember(Long id) {
        logger.debug("Deleting member id={}", id);
        Member member = memberRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Member not found with id: " + id));
        memberRepository.delete(member);
    }

    // Mapper
    private MemberResponse mapToResponse(Member member) {
        MemberResponse r = new MemberResponse();
        r.setId(member.getId());
        r.setName(member.getName());
        r.setEmail(member.getEmail());
        r.setPhone(member.getPhone());
        r.setBio(member.getBio());
        r.setBalance(member.getBalance());
        return r;
    }
}
--------------------- DTO / REQUEST FILES -------------------------
package com.gaming.dto.request;

import jakarta.validation.constraints.*;

public class MemberRequest {

    @NotBlank(message = "Name is required")
    @Size(min = 3, max = 50, message = "Name must be between 3 and 50 characters")
    private String name;

    @Email(message = "Invalid email format")
    @NotBlank(message = "Email is required")
    private String email;

    @NotBlank(message = "Phone is required")
    @Pattern(regexp = "^[0-9]{10}$", message = "Phone must be 10 digits")
    private String phone;

    @NotBlank(message = "Password is required")
    @Size(min = 6, message = "Password must be at least 6 characters")
    private String password;

    @Size(max = 500, message = "Bio can be at most 500 characters")
    private String bio;

    // --- Getters & Setters ---
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }

    public String getBio() { return bio; }
    public void setBio(String bio) { this.bio = bio; }
}
---------------------------------------------
package com.gaming.dto.request;

import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;

public class RechargeRequest {

    @NotNull(message = "Member ID is required")
    private Long memberId;

    @Min(value = 1, message = "Amount must be greater than 0")
    private double amount;

    // --- Getters & Setters ---
    public Long getMemberId() { return memberId; }
    public void setMemberId(Long memberId) { this.memberId = memberId; }

    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
}
-----------------------------------------------------
package com.gaming.dto.request;

public class GameSessionRequest {
    private Long memberId;
    private Long gameId;
    private int minutesPlayed;

    // Getters & Setters
    public Long getMemberId() { return memberId; }
    public void setMemberId(Long memberId) { this.memberId = memberId; }

    public Long getGameId() { return gameId; }
    public void setGameId(Long gameId) { this.gameId = gameId; }

    public int getMinutesPlayed() { return minutesPlayed; }
    public void setMinutesPlayed(int minutesPlayed) { this.minutesPlayed = minutesPlayed; }
}
----------------------------------------------
package com.gaming.dto.request;

import jakarta.validation.constraints.NotNull;
import java.time.LocalDate;

public class CollectionRequest {

    @NotNull(message = "Amount is required")
    private Float amount;

    @NotNull(message = "Date is required")
    private LocalDate date;

    // Getters and Setters
    public Float getAmount() {
        return amount;
    }
    public void setAmount(Float amount) {
        this.amount = amount;
    }

    public LocalDate getDate() {
        return date;
    }
    public void setDate(LocalDate date) {
        this.date = date;
    }
}
-------------------- DTO/RESPONSE FILES----------------------
package com.gaming.dto.response;

public class MemberResponse {

    private Long id;
    private String name;
    private String email;
    private String phone;
    private String bio;
    private Double balance;

    public MemberResponse() {}

    public MemberResponse(Long id, String name, String email, String phone, String bio, Double balance) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.phone = phone;
        this.bio = bio;
        this.balance = balance;
    }

    // --- Getters & Setters ---
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    public String getBio() { return bio; }
    public void setBio(String bio) { this.bio = bio; }

    public Double getBalance() { return balance; }
    public void setBalance(Double balance) { this.balance = balance; }
}
-----------------------------------------------
package com.gaming.dto.response;

import java.time.LocalDateTime;

public class RechargeResponse {

    private Long id;
    private Long memberId;
    private String memberName;
    private double amount;
    private double updatedBalance;
    private LocalDateTime rechargeAt;

    // --- Getters & Setters ---
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public Long getMemberId() { return memberId; }
    public void setMemberId(Long memberId) { this.memberId = memberId; }

    public String getMemberName() { return memberName; }
    public void setMemberName(String memberName) { this.memberName = memberName; }

    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }

    public double getUpdatedBalance() { return updatedBalance; }
    public void setUpdatedBalance(double updatedBalance) { this.updatedBalance = updatedBalance; }

    public LocalDateTime getRechargeAt() { return rechargeAt; }
    public void setRechargeAt(LocalDateTime rechargeAt) { this.rechargeAt = rechargeAt; }
}
-------------------------------------------------
package com.gaming.dto.response;

import java.time.LocalDateTime;

public class GameSessionResponse {
    private String message;
    private double cost;
    private double updatedBalance;
    private String gameName;
    private String memberName;
    private LocalDateTime startedAt;
    private LocalDateTime endedAt;

    // Getters & Setters
    public String getMessage() { return message; }
    public void setMessage(String message) { this.message = message; }

    public double getCost() { return cost; }
    public void setCost(double cost) { this.cost = cost; }

    public double getUpdatedBalance() { return updatedBalance; }
    public void setUpdatedBalance(double updatedBalance) { this.updatedBalance = updatedBalance; }

    public String getGameName() { return gameName; }
    public void setGameName(String gameName) { this.gameName = gameName; }

    public String getMemberName() { return memberName; }
    public void setMemberName(String memberName) { this.memberName = memberName; }

    public LocalDateTime getStartedAt() { return startedAt; }
    public void setStartedAt(LocalDateTime startedAt) { this.startedAt = startedAt; }

    public LocalDateTime getEndedAt() { return endedAt; }
    public void setEndedAt(LocalDateTime endedAt) { this.endedAt = endedAt; }
}
----------------------------------------------------------

package com.gaming.dto.response;

import java.time.LocalDate;

public class CollectionResponse {
    private int id;
    private double amount;
    private LocalDate date;

    // Getters and Setters
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }

    public double getAmount() {
        return amount;
    }
    public void setAmount(double amount) {
        this.amount = amount;
    }

    public LocalDate getDate() {
        return date;
    }
    public void setDate(LocalDate date) {
        this.date = date;
    }
}
---------------------------------------------------

